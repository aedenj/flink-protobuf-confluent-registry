/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4.1/userguide/building_java_projects.html
 */

plugins {
    id 'base'
    id 'idea'
    id 'java'

    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'

    // https://imperceptiblethoughts.com/shadow/introduction/
    id 'com.github.johnrengelman.shadow' version '7.1.2'

    // https://github.com/xvik/gradle-quality-plugin
    id 'ru.vyarus.quality' version '4.8.0'

    // https://plugins.gradle.org/plugin/com.adarshr.test-logger
    id 'com.adarshr.test-logger' version '3.2.0'

    // https://docs.gradle.org/current/userguide/jacoco_plugin.html
    id 'jacoco'
}

ext {
    javaVersion = 11
    flinkVersion = '1.16.0'
    junitVersion = '5.9.1'
    protoVersion = '3.21.2'
    testContainers = '1.17.6'
    assertjVersion = '3.23.1'
}

repositories {
    mavenCentral()
}

tasks {
    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(javaVersion)
        }
    }

    compileJava {
        options.encoding('UTF-8')
    }

    test {
        useJUnitPlatform()

        testlogger {
            theme 'mocha'
            slowThreshold 5000
            showStandardStreams true
            showFullStackTraces false
            logLevel 'quiet'
        }

        finalizedBy jacocoTestReport
    }

    jacocoTestCoverageVerification {
        dependsOn test
        violationRules {
            rule {
                limit {
                    counter = 'LINE'
                    minimum = 1.0
                }
                limit {
                    counter = 'BRANCH'
                    minimum = 1.0
                }
                limit {
                    counter = 'METHOD'
                    minimum = 1.0
                }
                limit {
                    counter = 'CLASS'
                    minimum = 1.0
                }
            }
        }
    }

    jacocoTestReport {
        dependsOn test
    }

    check {
        dependsOn jacocoTestCoverageVerification
    }
}

configurations {
    myShadowJar

    // provided by Flink
    myShadowJar.exclude group: 'org.apache.flink', module: 'force-shading'
    myShadowJar.exclude group: 'com.google.code.findbugs', module: 'jsr305'
    myShadowJar.exclude group: 'org.slf4j'
    myShadowJar.exclude group: 'log4j'
    myShadowJar.exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'

    // https://logging.apache.org/log4j/2.x/faq.html#exclusions
    // Good Explanation: https://stackoverflow.com/questions/42348755/class-path-contains-multiple-slf4j-bindings-error
    all*.exclude group: 'log4j', module: 'log4j'
    all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
}

dependencies {
    implementation "com.google.protobuf:protobuf-java:${protoVersion}"
    implementation "org.apache.flink:flink-table-common:${flinkVersion}"

    testImplementation(platform("org.junit:junit-bom:${junitVersion}"))
    testImplementation "org.junit.jupiter:junit-jupiter"
    testImplementation "org.testcontainers:testcontainers:${testContainers}"
    testImplementation "org.testcontainers:junit-jupiter:${testContainers}"
    testImplementation "org.assertj:assertj-core:${assertjVersion}"

    myShadowJar "com.google.protobuf:protobuf-java:${protoVersion}"
}

sourceSets {
    main.compileClasspath += configurations.myShadowJar
    main.runtimeClasspath += configurations.myShadowJar

    test.compileClasspath += configurations.myShadowJar
    test.runtimeClasspath += configurations.myShadowJar

    javadoc.classpath += configurations.myShadowJar
}

jar {
    archiveBaseName.set("${rootProject.name}")
    manifest {
        attributes "Project-Name": rootProject.name,
            "Build-OsName": System.getProperty("os.name"),
            "Build-OsVersion": System.getProperty("os.version"),
            "Build-Jdk": System.getProperty("java.version"),
            "Build-by": System.getProperty("user.name")
    }
}

shadowJar {
    configurations = [project.configurations.myShadowJar]
    archiveBaseName.set("${rootProject.name}")
    version("0.1")
    mergeServiceFiles()
    minimize()
}